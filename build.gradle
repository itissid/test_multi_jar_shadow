/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'sidharth_gupta' at '5/4/16 9:20 AM' with Gradle 2.12
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.12/userguide/tutorial_java_projects.html
 */

plugins {
    id 'java'
    id 'idea'
    id "com.github.johnrengelman.shadow" version "1.2.3"
}

description = """ The multi project test project """

import org.ajoberstar.gradle.git.release.semver.NearestVersionLocator
import org.ajoberstar.gradle.git.release.semver.SemVerStrategyState
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.gradle.git.release.base.ReleasePluginExtension
task getVersion << {
    grgit = Grgit.open(project.file('.'))
    def tagStrategy = project.extensions.getByType(ReleasePluginExtension).tagStrategy
    def nvl = new NearestVersionLocator(tagStrategy)
    println "*****"
    println nvl.locate(grgit)
    println grgit.status()
    println grgit.status().clean
    ext.version = version

    def nearestVersion = nvl.locate(grgit)
    println(String.format("Located nearest version: %s", nearestVersion))

        SemVerStrategyState state = new SemVerStrategyState(
            scopeFromProp: null,
            stageFromProp: 'final',
            currentHead: grgit.head(),
            currentBranch: grgit.branch.current,
            repoDirty: !grgit.status().clean,
            nearestVersion: nearestVersion
        )

        //Version version = StrategyUtil.all(
         //  normalStrategy, preReleaseStrategy, buildMetadataStrategy).infer(state).toVersion()
        print nearestVersion.normal.incrementPatchVersion()
        //one(Normal.USE_SCOPE_PROP, Normal.USE_NEAREST_ANY, Normal.useScope(ChangeScope.PATCH)),
        //logger.warn('Inferred project: {}, version: {}', project.name, version)

}
apply from: 'gradle/releaseWorkflow.gradle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// We only publish the fat jar as a stand alone artifact.
shadowJar {
        baseName = 'test-project'
        classifier = ''

}
task foo << {
    subprojects.tasks.each {
        println it.tasks.java 
    }
}


repositories {
     mavenCentral()
     maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }

}

dependencies {
    compile subprojects
}

subprojects {
        apply plugin: 'java'
        repositories {
             mavenCentral()
             maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }

        }
        dependencies {
            compile group: 'org.apache.hadoop', name: 'hadoop-core', version:'2.5.0-mr1-cdh5.3.3'
            testCompile group: 'org.mockito', name: 'mockito-all', version:'1.10.19'
            testCompile group: 'junit', name: 'junit', version:'4.11'
        }
}


jar {
    def manifestClasspath = configurations.runtime.collect { it.getName() }.join(' ')
    manifest {
        attributes  'Implementation-Title': "Test thing",
                    'Implementation-Version': '0.0.1',
                    'Built-By': System.getProperty('user.name'),
                    'Built-Date': new Date(),
                    'Built-JDK': System.getProperty('java.version'),
                    'Built-Gradle': gradle.gradleVersion,
                    'Class-Path': manifestClasspath
    }
}
// Failed attempts adding to source sets does nothing
//sourceSets {
//    main {
//        java {
//            srcDirs = subprojects.sourceSets.main.java.srcDirs.flatten()
//        }
//    }
//}
// Attempted to make a uber jar from just Foo and Bar thin jars, but that needs the subprojects dependencies being referenced in parents and sounds twisted
//ext.sharedManifest = manifest {
//    from subprojects.tasks.jar.manifest
//}
//
//
//task uberJar(type: Jar, dependsOn: subprojects.tasks['testClasses'] ) {
//    baseName = 'uberJar'
//    subprojects.each { subproject ->
//        from subproject.configurations.archives.allArtifacts.files.collect {
//            zipTree(it)
//        }
//        from files(subproject.tasks["test"].testClassesDir)
//        from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//    manifest { from(sharedManifest) }
//
//}

